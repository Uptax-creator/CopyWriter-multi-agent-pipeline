# Makefile para Nibo MCP Server v2.0
# Comandos √∫teis para gerenciar o servi√ßo

.PHONY: help install test diagnose start monitor clean

# Configura√ß√µes
PYTHON = python3
SCRIPTS_DIR = scripts

# Cores para output
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
BLUE = \033[0;34m
NC = \033[0m # No Color

help: ## Mostra esta ajuda
	@echo "$(BLUE)Nibo MCP Server v2.0 - Comandos Dispon√≠veis:$(NC)"
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "$(GREEN)  %-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(YELLOW)Exemplos de uso:$(NC)"
	@echo "  make install     # Instalar depend√™ncias"
	@echo "  make test        # Testar todas as ferramentas"
	@echo "  make diagnose    # Diagn√≥stico completo"
	@echo "  make start       # Iniciar servi√ßo"

install: ## Instala depend√™ncias
	@echo "$(BLUE)üì¶ Instalando depend√™ncias...$(NC)"
	$(PYTHON) -m pip install -r requirements.txt
	@echo "$(GREEN)‚úÖ Depend√™ncias instaladas$(NC)"

test-connection: ## Testa conectividade b√°sica
	@echo "$(BLUE)üåê Testando conectividade...$(NC)"
	$(PYTHON) $(SCRIPTS_DIR)/test_connection.py

test: ## Executa teste completo de todas as ferramentas
	@echo "$(BLUE)üß™ Testando todas as ferramentas...$(NC)"
	$(PYTHON) $(SCRIPTS_DIR)/test_all_tools_v2.py

diagnose: ## Executa diagn√≥stico completo do sistema
	@echo "$(BLUE)üîç Executando diagn√≥stico completo...$(NC)"
	$(PYTHON) $(SCRIPTS_DIR)/diagnose_nibo_service.py

start: ## Inicia o servidor MCP com verifica√ß√µes
	@echo "$(BLUE)üöÄ Iniciando Nibo MCP Server...$(NC)"
	$(PYTHON) $(SCRIPTS_DIR)/start_nibo_service.py

monitor: ## Inicia monitor de sa√∫de cont√≠nuo
	@echo "$(BLUE)üìä Iniciando monitor de sa√∫de...$(NC)"
	$(PYTHON) $(SCRIPTS_DIR)/health_monitor.py

monitor-once: ## Executa uma verifica√ß√£o de sa√∫de
	@echo "$(BLUE)üîç Verifica√ß√£o √∫nica de sa√∫de...$(NC)"
	$(PYTHON) $(SCRIPTS_DIR)/health_monitor.py --once

server: ## Inicia apenas o servidor MCP (sem verifica√ß√µes)
	@echo "$(BLUE)üñ•Ô∏è  Iniciando servidor MCP...$(NC)"
	$(PYTHON) nibo_mcp_server.py

validate: ## Valida estrutura do projeto
	@echo "$(BLUE)‚úÖ Validando estrutura do projeto...$(NC)"
	@test -f credentials.json || (echo "$(RED)‚ùå credentials.json n√£o encontrado$(NC)" && exit 1)
	@test -f nibo_mcp_server.py || (echo "$(RED)‚ùå nibo_mcp_server.py n√£o encontrado$(NC)" && exit 1)
	@test -d src/core || (echo "$(RED)‚ùå Diret√≥rio src/core n√£o encontrado$(NC)" && exit 1)
	@test -d src/tools || (echo "$(RED)‚ùå Diret√≥rio src/tools n√£o encontrado$(NC)" && exit 1)
	@echo "$(GREEN)‚úÖ Estrutura do projeto v√°lida$(NC)"

check-credentials: ## Verifica se credenciais est√£o configuradas
	@echo "$(BLUE)üîê Verificando credenciais...$(NC)"
	@$(PYTHON) -c "import json; creds = json.load(open('credentials.json')); print('‚úÖ Credenciais v√°lidas') if creds.get('companies') else exit(1)" || (echo "$(RED)‚ùå Credenciais inv√°lidas$(NC)" && exit 1)

quick-check: validate check-credentials test-connection ## Verifica√ß√£o r√°pida completa
	@echo "$(GREEN)üéâ Verifica√ß√£o r√°pida conclu√≠da com sucesso!$(NC)"

full-check: quick-check diagnose test ## Verifica√ß√£o completa (demora mais)
	@echo "$(GREEN)üéâ Verifica√ß√£o completa conclu√≠da com sucesso!$(NC)"

clean: ## Remove arquivos tempor√°rios e logs
	@echo "$(BLUE)üßπ Limpando arquivos tempor√°rios...$(NC)"
	@rm -f *.log
	@rm -f *_report_*.json
	@rm -f service_status.json
	@rm -rf __pycache__/
	@rm -rf src/__pycache__/
	@rm -rf src/core/__pycache__/
	@rm -rf src/tools/__pycache__/
	@rm -rf src/utils/__pycache__/
	@echo "$(GREEN)‚úÖ Limpeza conclu√≠da$(NC)"

logs: ## Mostra logs recentes
	@echo "$(BLUE)üìã Logs recentes:$(NC)"
	@if [ -f health_monitor.log ]; then \
		echo "$(YELLOW)Health Monitor (√∫ltimas 10 linhas):$(NC)"; \
		tail -10 health_monitor.log; \
		echo ""; \
	fi
	@if ls *_report_*.json 1> /dev/null 2>&1; then \
		echo "$(YELLOW)Relat√≥rios dispon√≠veis:$(NC)"; \
		ls -la *_report_*.json; \
	fi

status: ## Mostra status atual do servi√ßo
	@echo "$(BLUE)üìä Status do Nibo MCP Server:$(NC)"
	@if [ -f service_status.json ]; then \
		$(PYTHON) -c "import json; status = json.load(open('service_status.json')); print(f\"Status: {status.get('status', 'unknown')}\"); print(f\"Iniciado: {status.get('started_at', 'unknown')}\"); print(f\"Vers√£o: {status.get('version', 'unknown')}\")"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Arquivo de status n√£o encontrado$(NC)"; \
	fi

dev-setup: install validate check-credentials ## Configura√ß√£o para desenvolvimento
	@echo "$(GREEN)üõ†Ô∏è  Ambiente de desenvolvimento configurado!$(NC)"
	@echo "$(YELLOW)Pr√≥ximos passos:$(NC)"
	@echo "  1. make test-connection  # Testar conectividade"
	@echo "  2. make diagnose         # Diagn√≥stico completo"
	@echo "  3. make start            # Iniciar servi√ßo"

prod-setup: dev-setup full-check ## Configura√ß√£o para produ√ß√£o
	@echo "$(GREEN)üöÄ Ambiente de produ√ß√£o validado!$(NC)"
	@echo "$(YELLOW)Para monitoramento cont√≠nuo:$(NC)"
	@echo "  make monitor &           # Monitor em background"

# Comandos de desenvolvimento
lint: ## Executa linting do c√≥digo (se pylint instalado)
	@if command -v pylint >/dev/null 2>&1; then \
		echo "$(BLUE)üîç Executando pylint...$(NC)"; \
		pylint src/ --disable=all --enable=E,W; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  pylint n√£o instalado$(NC)"; \
	fi

format: ## Formata c√≥digo (se black instalado)
	@if command -v black >/dev/null 2>&1; then \
		echo "$(BLUE)üé® Formatando c√≥digo...$(NC)"; \
		black src/ scripts/; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  black n√£o instalado$(NC)"; \
	fi

# Comandos de debug
debug-api: ## Debug de conectividade com API
	@echo "$(BLUE)üêõ Debug de API...$(NC)"
	@$(PYTHON) -c "import asyncio; from src.core.config import NiboConfig; from src.core.nibo_client import NiboClient; config = NiboConfig(); client = NiboClient(config); print('Config:', config.get_current_company_info()); result = asyncio.run(client.testar_conexao()); print('Result:', result)"

debug-tools: ## Debug b√°sico das ferramentas
	@echo "$(BLUE)üêõ Debug de ferramentas...$(NC)"
	@$(PYTHON) -c "from src.tools.consultas import NiboConsultas; from src.core.nibo_client import NiboClient; from src.core.config import NiboConfig; import asyncio; config = NiboConfig(); client = NiboClient(config); consultas = NiboConsultas(client); result = asyncio.run(consultas.consultar_categorias(registros_por_pagina=1)); print('Categorias:', len(result.get('items', [])))"

# Comandos de informa√ß√£o
version: ## Mostra vers√£o e informa√ß√µes
	@echo "$(BLUE)Nibo MCP Server v2.0$(NC)"
	@echo "Python: $(shell $(PYTHON) --version)"
	@echo "Diret√≥rio: $(shell pwd)"
	@echo "Ferramentas: 31 implementadas"

list-tools: ## Lista todas as ferramentas dispon√≠veis
	@echo "$(BLUE)üõ†Ô∏è  Ferramentas Implementadas (31):$(NC)"
	@echo ""
	@echo "$(YELLOW)üìã Consultas (7):$(NC)"
	@echo "  consultar_categorias, consultar_centros_custo, consultar_clientes"
	@echo "  consultar_fornecedores, consultar_contas_pagar, consultar_contas_receber, consultar_socios"
	@echo ""
	@echo "$(YELLOW)üë• CRUD Clientes/Fornecedores (8):$(NC)"
	@echo "  incluir_cliente, alterar_cliente, excluir_cliente, obter_cliente_por_id"
	@echo "  incluir_fornecedor, alterar_fornecedor, excluir_fornecedor, obter_fornecedor_por_id"
	@echo ""
	@echo "$(YELLOW)üí∞ CRUD Financeiro (6):$(NC)"
	@echo "  incluir_conta_pagar, alterar_conta_pagar, excluir_conta_pagar"
	@echo "  incluir_conta_receber, alterar_conta_receber, excluir_conta_receber"
	@echo ""
	@echo "$(YELLOW)üÜï CRUD S√≥cios (5):$(NC)"
	@echo "  consultar_socios, incluir_socio, alterar_socio, excluir_socio, obter_socio_por_id"
	@echo ""
	@echo "$(YELLOW)‚öôÔ∏è  Gerenciamento (4):$(NC)"
	@echo "  listar_empresas, selecionar_empresa, info_empresa_atual, testar_conexao"
	@echo ""
	@echo "$(YELLOW)üîÑ Compatibilidade (1):$(NC)"
	@echo "  consultar_departamentos (alias para consultar_centros_custo)"