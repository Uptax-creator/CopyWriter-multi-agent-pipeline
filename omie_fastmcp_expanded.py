#!/usr/bin/env python3
"""
üöÄ Omie FastMCP Expandido - Conjunto Completo de Tools
Vers√£o para Valida√ß√£o Homologa√ß√£o/Produ√ß√£o
"""

import asyncio
import os
import sys
import json
from typing import Optional, Dict, Any, List
from datetime import datetime
from fastmcp import FastMCP

# Adicionar src ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

try:
    from src.client.omie_client_fixed import OmieClient
except ImportError:
    try:
        from src.client.omie_client import OmieClient
    except ImportError:
        print("Erro: N√£o foi poss√≠vel importar OmieClient")
        sys.exit(1)

# Criar inst√¢ncia FastMCP
mcp = FastMCP("Omie ERP Complete Suite üè¢")

# Cliente Omie global
omie_client = None

async def get_omie_client():
    """Obt√©m cliente Omie inicializado"""
    global omie_client
    if omie_client is None:
        try:
            omie_client = OmieClient()
            if hasattr(omie_client, 'initialize'):
                await omie_client.initialize()
        except Exception as e:
            raise Exception(f"Erro ao inicializar cliente Omie: {e}")
    return omie_client

# =============================================================================
# TOOLS B√ÅSICAS DE SISTEMA
# =============================================================================

@mcp.tool
async def testar_conexao() -> str:
    """Testa a conex√£o com a API do Omie ERP"""
    try:
        client = await get_omie_client()
        result = await client.testar_conexao()
        return json.dumps({
            "status": "success",
            "message": "Conex√£o estabelecida com sucesso",
            "result": result,
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)
    except Exception as e:
        return json.dumps({
            "status": "error",
            "message": f"Erro na conex√£o: {str(e)}",
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)

@mcp.tool
async def obter_info_empresa() -> str:
    """Obt√©m informa√ß√µes da empresa no Omie"""
    try:
        client = await get_omie_client()
        if hasattr(client, 'obter_info_empresa'):
            result = await client.obter_info_empresa()
        else:
            result = {"message": "M√©todo ainda n√£o implementado no cliente"}
        
        return json.dumps({
            "status": "success",
            "data": result,
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)
    except Exception as e:
        return json.dumps({
            "status": "error",
            "message": str(e),
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)

# =============================================================================
# TOOLS DE CONSULTA ORGANIZACIONAL
# =============================================================================

@mcp.tool
async def consultar_categorias(
    pagina: int = 1,
    registros_por_pagina: int = 50,
    filtro: Optional[str] = None
) -> str:
    """Consulta categorias cadastradas no Omie ERP"""
    try:
        client = await get_omie_client()
        result = await client.consultar_categorias(
            pagina=pagina,
            registros_por_pagina=registros_por_pagina
        )
        
        # Aplicar filtro se fornecido
        if filtro and isinstance(result, dict) and 'categoria' in result:
            filtered_categories = [
                cat for cat in result['categoria']
                if filtro.lower() in cat.get('descricao', '').lower()
            ]
            result['categoria'] = filtered_categories
            result['total_filtrado'] = len(filtered_categories)
        
        return json.dumps({
            "status": "success",
            "data": result,
            "filtro_aplicado": filtro,
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)
    except Exception as e:
        return json.dumps({
            "status": "error",
            "message": str(e),
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)

@mcp.tool
async def consultar_departamentos(
    pagina: int = 1,
    registros_por_pagina: int = 50
) -> str:
    """Consulta departamentos cadastrados no Omie ERP"""
    try:
        client = await get_omie_client()
        result = await client.consultar_departamentos(
            pagina=pagina,
            registros_por_pagina=registros_por_pagina
        )
        return json.dumps({
            "status": "success",
            "data": result,
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)
    except Exception as e:
        return json.dumps({
            "status": "error",
            "message": str(e),
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)

@mcp.tool
async def consultar_tipos_documento(codigo: Optional[str] = None) -> str:
    """Consulta tipos de documento no Omie ERP"""
    try:
        client = await get_omie_client()
        result = await client.consultar_tipos_documento(codigo=codigo)
        return json.dumps({
            "status": "success",
            "data": result,
            "codigo_filtro": codigo,
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)
    except Exception as e:
        return json.dumps({
            "status": "error",
            "message": str(e),
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)

# =============================================================================
# TOOLS FINANCEIRAS
# =============================================================================

@mcp.tool
async def consultar_contas_pagar(
    data_inicio: Optional[str] = None,
    data_fim: Optional[str] = None,
    pagina: int = 1,
    registros_por_pagina: int = 20,
    apenas_vencidas: bool = False
) -> str:
    """Consulta contas a pagar no Omie ERP"""
    try:
        client = await get_omie_client()
        
        # Se apenas_vencidas √© True, definir data_fim como hoje
        if apenas_vencidas and not data_fim:
            data_fim = datetime.now().strftime("%d/%m/%Y")
        
        result = await client.consultar_contas_pagar(
            data_inicio=data_inicio,
            data_fim=data_fim,
            pagina=pagina,
            registros_por_pagina=registros_por_pagina
        )
        
        return json.dumps({
            "status": "success",
            "data": result,
            "filtros": {
                "data_inicio": data_inicio,
                "data_fim": data_fim,
                "pagina": pagina,
                "apenas_vencidas": apenas_vencidas
            },
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)
    except Exception as e:
        return json.dumps({
            "status": "error",
            "message": str(e),
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)

@mcp.tool
async def consultar_contas_receber(
    data_inicio: Optional[str] = None,
    data_fim: Optional[str] = None,
    pagina: int = 1,
    registros_por_pagina: int = 20,
    apenas_vencidas: bool = False
) -> str:
    """Consulta contas a receber no Omie ERP"""
    try:
        client = await get_omie_client()
        
        # Se apenas_vencidas √© True, definir data_fim como hoje
        if apenas_vencidas and not data_fim:
            data_fim = datetime.now().strftime("%d/%m/%Y")
        
        result = await client.consultar_contas_receber(
            data_inicio=data_inicio,
            data_fim=data_fim,
            pagina=pagina,
            registros_por_pagina=registros_por_pagina
        )
        
        return json.dumps({
            "status": "success",
            "data": result,
            "filtros": {
                "data_inicio": data_inicio,
                "data_fim": data_fim,
                "pagina": pagina,
                "apenas_vencidas": apenas_vencidas
            },
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)
    except Exception as e:
        return json.dumps({
            "status": "error",
            "message": str(e),
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)

# =============================================================================
# TOOLS DE CLIENTES E FORNECEDORES
# =============================================================================

@mcp.tool
async def listar_clientes(
    pagina: int = 1,
    registros_por_pagina: int = 50,
    filtro_nome: Optional[str] = None
) -> str:
    """Lista clientes cadastrados no Omie ERP"""
    try:
        client = await get_omie_client()
        if hasattr(client, 'listar_clientes'):
            result = await client.listar_clientes(
                pagina=pagina,
                registros_por_pagina=registros_por_pagina
            )
        else:
            # Fallback para m√©todo gen√©rico se dispon√≠vel
            result = {"message": "M√©todo de listagem de clientes n√£o dispon√≠vel"}
        
        return json.dumps({
            "status": "success",
            "data": result,
            "filtros": {
                "nome": filtro_nome,
                "pagina": pagina,
                "registros_por_pagina": registros_por_pagina
            },
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)
    except Exception as e:
        return json.dumps({
            "status": "error",
            "message": str(e),
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)

@mcp.tool
async def cadastrar_cliente(
    nome: str,
    cnpj_cpf: str,
    email: Optional[str] = None,
    telefone: Optional[str] = None,
    endereco: Optional[str] = None
) -> str:
    """Cadastra novo cliente no Omie ERP"""
    try:
        client = await get_omie_client()
        
        # Dados do cliente
        dados_cliente = {
            "nome": nome,
            "cnpj_cpf": cnpj_cpf
        }
        
        if email:
            dados_cliente["email"] = email
        if telefone:
            dados_cliente["telefone"] = telefone
        if endereco:
            dados_cliente["endereco"] = endereco
        
        if hasattr(client, 'cadastrar_cliente'):
            result = await client.cadastrar_cliente(dados_cliente)
        else:
            result = {"message": "M√©todo de cadastro de cliente n√£o dispon√≠vel no momento"}
        
        return json.dumps({
            "status": "success",
            "data": result,
            "dados_enviados": dados_cliente,
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)
    except Exception as e:
        return json.dumps({
            "status": "error",
            "message": str(e),
            "dados_tentativa": {
                "nome": nome,
                "cnpj_cpf": cnpj_cpf[:4] + "*" * (len(cnpj_cpf) - 4)  # Mascarar CPF/CNPJ
            },
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)

@mcp.tool
async def listar_fornecedores(
    pagina: int = 1,
    registros_por_pagina: int = 50
) -> str:
    """Lista fornecedores cadastrados no Omie ERP"""
    try:
        client = await get_omie_client()
        if hasattr(client, 'listar_fornecedores'):
            result = await client.listar_fornecedores(
                pagina=pagina,
                registros_por_pagina=registros_por_pagina
            )
        else:
            result = {"message": "M√©todo de listagem de fornecedores n√£o dispon√≠vel"}
        
        return json.dumps({
            "status": "success",
            "data": result,
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)
    except Exception as e:
        return json.dumps({
            "status": "error",
            "message": str(e),
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)

# =============================================================================
# TOOLS DE PRODUTOS E ESTOQUE
# =============================================================================

@mcp.tool
async def listar_produtos(
    pagina: int = 1,
    registros_por_pagina: int = 50,
    filtro_nome: Optional[str] = None
) -> str:
    """Lista produtos cadastrados no Omie ERP"""
    try:
        client = await get_omie_client()
        if hasattr(client, 'listar_produtos'):
            result = await client.listar_produtos(
                pagina=pagina,
                registros_por_pagina=registros_por_pagina
            )
        else:
            result = {"message": "M√©todo de listagem de produtos n√£o dispon√≠vel"}
        
        return json.dumps({
            "status": "success",
            "data": result,
            "filtros": {
                "nome": filtro_nome,
                "pagina": pagina
            },
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)
    except Exception as e:
        return json.dumps({
            "status": "error",
            "message": str(e),
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)

@mcp.tool
async def consultar_estoque(
    codigo_produto: Optional[str] = None,
    pagina: int = 1
) -> str:
    """Consulta estoque de produtos no Omie ERP"""
    try:
        client = await get_omie_client()
        if hasattr(client, 'consultar_estoque'):
            result = await client.consultar_estoque(
                codigo_produto=codigo_produto,
                pagina=pagina
            )
        else:
            result = {"message": "M√©todo de consulta de estoque n√£o dispon√≠vel"}
        
        return json.dumps({
            "status": "success",
            "data": result,
            "filtros": {
                "codigo_produto": codigo_produto,
                "pagina": pagina
            },
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)
    except Exception as e:
        return json.dumps({
            "status": "error",
            "message": str(e),
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)

# =============================================================================
# TOOLS DE VENDAS E PEDIDOS
# =============================================================================

@mcp.tool
async def listar_pedidos_venda(
    data_inicio: Optional[str] = None,
    data_fim: Optional[str] = None,
    pagina: int = 1,
    registros_por_pagina: int = 20
) -> str:
    """Lista pedidos de venda no Omie ERP"""
    try:
        client = await get_omie_client()
        if hasattr(client, 'listar_pedidos_venda'):
            result = await client.listar_pedidos_venda(
                data_inicio=data_inicio,
                data_fim=data_fim,
                pagina=pagina,
                registros_por_pagina=registros_por_pagina
            )
        else:
            result = {"message": "M√©todo de listagem de pedidos n√£o dispon√≠vel"}
        
        return json.dumps({
            "status": "success",
            "data": result,
            "filtros": {
                "data_inicio": data_inicio,
                "data_fim": data_fim,
                "pagina": pagina
            },
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)
    except Exception as e:
        return json.dumps({
            "status": "error",
            "message": str(e),
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)

# =============================================================================
# TOOLS DE RELAT√ìRIOS E AN√ÅLISES
# =============================================================================

@mcp.tool
async def relatorio_vendas_periodo(
    data_inicio: str,
    data_fim: str,
    agrupar_por: str = "mes"  # mes, dia, cliente
) -> str:
    """Gera relat√≥rio de vendas por per√≠odo"""
    try:
        client = await get_omie_client()
        
        # Buscar pedidos do per√≠odo
        if hasattr(client, 'listar_pedidos_venda'):
            pedidos = await client.listar_pedidos_venda(
                data_inicio=data_inicio,
                data_fim=data_fim
            )
            
            # Processar dados para relat√≥rio
            relatorio = {
                "periodo": f"{data_inicio} a {data_fim}",
                "total_pedidos": len(pedidos.get('pedidos', [])) if isinstance(pedidos, dict) else 0,
                "valor_total": 0,
                "agrupamento": agrupar_por,
                "detalhes": pedidos
            }
        else:
            relatorio = {
                "periodo": f"{data_inicio} a {data_fim}",
                "message": "M√©todo de relat√≥rio n√£o dispon√≠vel",
                "agrupamento": agrupar_por
            }
        
        return json.dumps({
            "status": "success",
            "data": relatorio,
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)
    except Exception as e:
        return json.dumps({
            "status": "error",
            "message": str(e),
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)

@mcp.tool
async def dashboard_financeiro() -> str:
    """Gera dashboard com vis√£o geral financeira"""
    try:
        client = await get_omie_client()
        
        dashboard = {
            "timestamp": datetime.now().isoformat(),
            "resumo": {
                "contas_pagar": "Carregando...",
                "contas_receber": "Carregando...",
                "saldo_estimado": 0
            },
            "alertas": [],
            "metricas": {
                "total_clientes": "N/A",
                "total_produtos": "N/A",
                "pedidos_mes": "N/A"
            }
        }
        
        # Tentar coletar dados b√°sicos
        try:
            # Contas a pagar vencidas
            contas_pagar = await client.consultar_contas_pagar(
                data_fim=datetime.now().strftime("%d/%m/%Y")
            )
            dashboard["resumo"]["contas_pagar"] = len(contas_pagar.get('contas', [])) if isinstance(contas_pagar, dict) else 0
        except:
            dashboard["alertas"].append("N√£o foi poss√≠vel carregar contas a pagar")
        
        try:
            # Contas a receber vencidas
            contas_receber = await client.consultar_contas_receber(
                data_fim=datetime.now().strftime("%d/%m/%Y")
            )
            dashboard["resumo"]["contas_receber"] = len(contas_receber.get('contas', [])) if isinstance(contas_receber, dict) else 0
        except:
            dashboard["alertas"].append("N√£o foi poss√≠vel carregar contas a receber")
        
        return json.dumps({
            "status": "success",
            "data": dashboard,
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)
    except Exception as e:
        return json.dumps({
            "status": "error",
            "message": str(e),
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)

# =============================================================================
# RESOURCES PARA DADOS ESTRUTURADOS
# =============================================================================

@mcp.resource("omie://config")
async def get_omie_config() -> str:
    """Retorna configura√ß√£o atual do cliente Omie"""
    try:
        client = await get_omie_client()
        config = {
            "base_url": getattr(client, 'base_url', 'https://app.omie.com.br/api/v1/'),
            "timeout": getattr(client, 'timeout', 30),
            "status": "conectado" if client else "desconectado",
            "tools_disponiveis": 15,
            "versao": "2.0 - Expandido"
        }
        return json.dumps(config, ensure_ascii=False, indent=2)
    except Exception as e:
        return json.dumps({"erro": str(e)}, ensure_ascii=False, indent=2)

@mcp.resource("omie://status")
async def get_omie_status() -> str:
    """Retorna status atual da conex√£o Omie"""
    try:
        client = await get_omie_client()
        test_result = await client.testar_conexao()
        status = {
            "connection": "ok" if test_result else "failed",
            "timestamp": datetime.now().isoformat(),
            "client_initialized": client is not None,
            "tools_count": 15,
            "features": [
                "Sistema b√°sico",
                "Consultas organizacionais",
                "Ferramentas financeiras",
                "Gest√£o de clientes/fornecedores",
                "Produtos e estoque",
                "Vendas e pedidos",
                "Relat√≥rios e an√°lises"
            ]
        }
        return json.dumps(status, ensure_ascii=False, indent=2)
    except Exception as e:
        return json.dumps({
            "connection": "error",
            "message": str(e),
            "timestamp": datetime.now().isoformat()
        }, ensure_ascii=False, indent=2)

# =============================================================================
# PROMPTS PARA AN√ÅLISES INTELIGENTES
# =============================================================================

@mcp.prompt("omie-analise-completa")
async def analise_completa_prompt(
    periodo_dias: str = "30",
    foco: str = "financeiro"  # financeiro, vendas, estoque
) -> str:
    """Gera prompt para an√°lise completa da empresa"""
    return f"""
Execute uma an√°lise completa da empresa com foco {foco} dos √∫ltimos {periodo_dias} dias.

üìã DADOS PARA COLETAR:
1. Use testar_conexao() para validar sistema
2. Use dashboard_financeiro() para vis√£o geral
3. Use consultar_contas_pagar(apenas_vencidas=true) para urg√™ncias
4. Use consultar_contas_receber(apenas_vencidas=true) para receb√≠veis
5. Use listar_clientes() para base de clientes
6. Use listar_produtos() para cat√°logo
7. Use relatorio_vendas_periodo() para performance

üîç AN√ÅLISE REQUERIDA:
1. Sa√∫de financeira geral
2. Fluxo de caixa (pagar vs receber)
3. Performance de vendas
4. Base de clientes ativa
5. Gest√£o de estoque
6. Principais riscos identificados
7. Oportunidades de melhoria

üìè RELAT√ìRIO FINAL:
- Resumo executivo (3-5 pontos)
- M√©tricas-chave com alertas
- Recomenda√ß√µes por prioridade
- Pr√≥ximas a√ß√µes sugeridas
"""

@mcp.prompt("omie-validacao-homologacao")
async def validacao_homologacao_prompt() -> str:
    """Prompt para valida√ß√£o de ambiente de homologa√ß√£o"""
    return """
Execute valida√ß√£o completa do ambiente de homologa√ß√£o Omie FastMCP.

üß™ TESTES DE CONECTIVIDADE:
1. testar_conexao() - Validar API
2. obter_info_empresa() - Dados empresa
3. omie://status - Resource de status
4. omie://config - Configura√ß√£o atual

üìã TESTES FUNCIONAIS:
1. consultar_categorias() - Dados organizacionais
2. consultar_contas_pagar() - M√≥dulo financeiro
3. listar_clientes() - Gest√£o comercial
4. listar_produtos() - Cat√°logo
5. dashboard_financeiro() - Relat√≥rios

üìä VALIDA√á√ÉO DE PERFORMANCE:
- Tempo de resposta < 3s por tool
- Sucesso rate > 95%
- Handling de erros adequado
- Retorno JSON estruturado

üèÜ CRIT√âRIOS DE APROVA√á√ÉO:
‚úÖ Todas as 15 tools funcionais
‚úÖ Resources respondendo
‚úÖ Prompts gerando templates
‚úÖ Tratamento de erro robusto
‚úÖ Performance adequada

Relate o status de cada teste e aprova√ß√£o final para PRODU√á√ÉO.
"""

if __name__ == "__main__":
    print("üöÄ Omie FastMCP Expandido - Conjunto Completo")
    print("=" * 50)
    print("üìä 15 Ferramentas dispon√≠veis:")
    print("\nüîß SISTEMA:")
    print("   - testar_conexao")
    print("   - obter_info_empresa")
    print("\nüìã ORGANIZA√á√ÉO:")
    print("   - consultar_categorias")
    print("   - consultar_departamentos")
    print("   - consultar_tipos_documento")
    print("\nüí∞ FINANCEIRO:")
    print("   - consultar_contas_pagar")
    print("   - consultar_contas_receber")
    print("\nüë• COMERCIAL:")
    print("   - listar_clientes")
    print("   - cadastrar_cliente")
    print("   - listar_fornecedores")
    print("\nüì¶ PRODUTOS:")
    print("   - listar_produtos")
    print("   - consultar_estoque")
    print("\nüìä VENDAS & RELAT√ìRIOS:")
    print("   - listar_pedidos_venda")
    print("   - relatorio_vendas_periodo")
    print("   - dashboard_financeiro")
    print("\nüìÇ Resources: omie://config, omie://status")
    print("üìù Prompts: omie-analise-completa, omie-validacao-homologacao")
    print("\nüèÜ PRONTO PARA VALIDA√á√ÉO HOMOLOGA√á√ÉO/PRODU√á√ÉO!")
    print()
    
    # Executar servidor FastMCP expandido
    mcp.run()