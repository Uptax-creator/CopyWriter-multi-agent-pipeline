#!/usr/bin/env python3
"""
Configura√ß√£o do Claude Desktop para usar o servidor HTTP do Omie MCP
"""

import os
import json
import sys
import subprocess
from pathlib import Path

def main():
    print("üöÄ Configurando Claude Desktop para usar servidor HTTP v2.0.0...")
    
    # Caminho para a configura√ß√£o do Claude
    if sys.platform == "darwin":  # macOS
        config_dir = Path.home() / "Library" / "Application Support" / "Claude"
    elif sys.platform == "win32":  # Windows
        config_dir = Path.home() / "AppData" / "Roaming" / "Claude"
    else:  # Linux
        config_dir = Path.home() / ".config" / "Claude"
    
    config_dir.mkdir(parents=True, exist_ok=True)
    config_file = config_dir / "claude_desktop_config.json"
    
    # Configura√ß√£o usando cliente HTTP
    project_dir = Path(__file__).parent.parent
    python_path = str(project_dir / "venv" / "bin" / "python")
    client_path = str(project_dir / "claude_http_client.py")
    
    # Verificar se o ambiente virtual existe
    if not Path(python_path).exists():
        python_path = "python3"
    
    config = {
        "mcpServers": {
            "omie-erp": {
                "command": python_path,
                "args": [client_path]
            }
        }
    }
    
    # Escrever configura√ß√£o
    try:
        with open(config_file, 'w') as f:
            json.dump(config, f, indent=2)
        print(f"‚úÖ Configura√ß√£o criada em: {config_file}")
        
        # Mostrar configura√ß√£o
        print("\\nüìã Configura√ß√£o do Claude Desktop:")
        with open(config_file, 'r') as f:
            print(f.read())
            
    except Exception as e:
        print(f"‚ùå Erro ao criar configura√ß√£o: {e}")
        return False
    
    # Verificar se o servidor HTTP pode ser iniciado
    print("\\nüß™ Verificando servidor HTTP...")
    try:
        # Testar se as depend√™ncias est√£o dispon√≠veis
        subprocess.run([python_path, "-c", "import fastapi, uvicorn, httpx, pydantic"], 
                      check=True, capture_output=True)
        print("‚úÖ Depend√™ncias do servidor HTTP dispon√≠veis")
        
    except subprocess.CalledProcessError:
        print("‚ùå Erro: Depend√™ncias n√£o encontradas")
        print("   Execute: pip install fastapi uvicorn httpx pydantic")
        return False
    
    # Instru√ß√µes de uso
    print("\\nüìã INSTRU√á√ïES DE USO:")
    print("1. Inicie o servidor HTTP em um terminal:")
    print("   python scripts/start_server.py")
    print("")
    print("2. Feche e reabra o Claude Desktop")
    print("")
    print("3. Teste com: 'Consulte as categorias do Omie ERP'")
    
    print("\\nüí° VANTAGENS DA ARQUITETURA H√çBRIDA:")
    print("‚úÖ Estrutura modular e organizada")
    print("‚úÖ C√≥digo limpo e manuten√≠vel")
    print("‚úÖ Testes unit√°rios estruturados")
    print("‚úÖ Valida√ß√£o robusta de dados")
    print("‚úÖ Logs centralizados e claros")
    print("‚úÖ Documenta√ß√£o autom√°tica")
    print("‚úÖ Configura√ß√£o unificada")
    
    print("\\nüîß ENDPOINTS DISPON√çVEIS:")
    print("‚Ä¢ http://localhost:3000/mcp/tools - Lista ferramentas")
    print("‚Ä¢ http://localhost:3000/mcp/tools/consultar_categorias - Executar ferramenta")
    print("‚Ä¢ http://localhost:3000/docs - Documenta√ß√£o autom√°tica")
    print("‚Ä¢ http://localhost:3000/test/categorias - Teste r√°pido")
    print("‚Ä¢ http://localhost:3000/health - Health check")
    
    print("\\nüõ†Ô∏è FERRAMENTAS DISPON√çVEIS:")
    print("‚Ä¢ Consultas: categorias, departamentos, tipos de documento")
    print("‚Ä¢ Clientes: incluir, alterar, consultar")
    print("‚Ä¢ Fornecedores: incluir, alterar, consultar")
    print("‚Ä¢ Contas a pagar: incluir, alterar, excluir, consultar")
    print("‚Ä¢ Contas a receber: incluir, alterar, excluir, consultar")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)